services:
    # Single Redis instance for basic tests
    redis-single:
        image: redis:7-alpine
        command: redis-server --appendonly yes
        ports:
            - "6379:6379"
        networks:
            - redis_network

    # Redis Cluster nodes
    redis-1:
        image: redis:7-alpine
        command: >
            redis-server
            --cluster-enabled yes
            --cluster-config-file nodes.conf
            --cluster-node-timeout 5000
            --appendonly yes
            --port 6379
            --cluster-announce-ip 172.38.0.11
            --cluster-announce-port 6379
            --cluster-announce-bus-port 16379
        ports:
            - 6371:6379
            - 16371:16379
        networks:
            redis_network:
                ipv4_address: 172.38.0.11
    redis-2:
        image: redis:7-alpine
        command: >
            redis-server
            --cluster-enabled yes
            --cluster-config-file nodes.conf
            --cluster-node-timeout 5000
            --appendonly yes
            --port 6379
            --cluster-announce-ip 172.38.0.12
            --cluster-announce-port 6379
            --cluster-announce-bus-port 16379
        ports:
            - "6372:6379"
            - 16372:16379
        networks:
            redis_network:
                ipv4_address: 172.38.0.12
    redis-3:
        image: redis:7-alpine
        command: >
            redis-server
            --cluster-enabled yes
            --cluster-config-file nodes.conf
            --cluster-node-timeout 5000
            --appendonly yes
            --port 6379
            --cluster-announce-ip 172.38.0.13
            --cluster-announce-port 6379
            --cluster-announce-bus-port 16379
        ports:
            - "6373:6379"
            - 16373:16379
        networks:
            redis_network:
                ipv4_address: 172.38.0.13
    redis-4:
        image: redis:7-alpine
        command: >
            redis-server
            --cluster-enabled yes
            --cluster-config-file nodes.conf
            --cluster-node-timeout 5000
            --appendonly yes
            --port 6379
            --cluster-announce-ip 172.38.0.14
            --cluster-announce-port 6379
            --cluster-announce-bus-port 16379
        ports:
            - "6374:6379"
            - 16374:16379
        networks:
            redis_network:
                ipv4_address: 172.38.0.14
    redis-5:
        image: redis:7-alpine
        command: >
            redis-server
            --cluster-enabled yes
            --cluster-config-file nodes.conf
            --cluster-node-timeout 5000
            --appendonly yes
            --port 6379
            --cluster-announce-ip 172.38.0.15
            --cluster-announce-port 6379
            --cluster-announce-bus-port 16379
        ports:
            - "6375:6379"
            - 16375:16379
        networks:
            redis_network:
                ipv4_address: 172.38.0.15
    redis-6:
        image: redis:7-alpine
        command: >
            redis-server
            --cluster-enabled yes
            --cluster-config-file nodes.conf
            --cluster-node-timeout 5000
            --appendonly yes
            --port 6379
            --cluster-announce-ip 172.38.0.16
            --cluster-announce-port 6379
            --cluster-announce-bus-port 16379
        ports:
            - "6376:6379"
            - "16376:16379"
        networks:
            redis_network:
                ipv4_address: 172.38.0.16

    cluster-init:
        image: redis:7-alpine
        depends_on:
            - redis-1
            - redis-2
            - redis-3
            - redis-4
            - redis-5
            - redis-6
        command: >
            sh -c "
            echo 'Starting Redis cluster initialization...'
            
            # Define Redis nodes
            REDIS_NODES='172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379'
            MAX_WAIT_TIME=120
            BACKOFF_DELAY=2
            
            # Function to check if a Redis node is ready
            check_redis_node() {
                host_port=\$1
                host=\$(echo \$host_port | cut -d: -f1)
                port=\$(echo \$host_port | cut -d: -f2)
                
                # Check TCP connectivity
                if ! nc -z \$host \$port 2>/dev/null; then
                    return 1
                fi
                
                # Check Redis PING response
                if ! redis-cli -h \$host -p \$port ping 2>/dev/null | grep -q 'PONG'; then
                    return 1
                fi
                
                # Check Redis INFO response (ensure it's in cluster mode)
                if ! redis-cli -h \$host -p \$port info server 2>/dev/null | grep -q 'redis_version'; then
                    return 1
                fi
                
                return 0
            }
            
            # Wait for all Redis nodes to be ready
            echo 'Waiting for Redis nodes to be ready...'
            start_time=\$(date +%s)
            
            while true; do
                current_time=\$(date +%s)
                elapsed=\$((current_time - start_time))
                
                if [ \$elapsed -gt \$MAX_WAIT_TIME ]; then
                    echo 'ERROR: Timeout waiting for Redis nodes to become ready after \${MAX_WAIT_TIME}s'
                    echo 'Failed nodes:'
                    for node in \$REDIS_NODES; do
                        if ! check_redis_node \$node; then
                            echo '  - \$node: NOT READY'
                        fi
                    done
                    exit 1
                fi
                
                all_ready=true
                for node in \$REDIS_NODES; do
                    if ! check_redis_node \$node; then
                        echo 'Node \$node not ready yet... (elapsed: \${elapsed}s)'
                        all_ready=false
                        break
                    fi
                done
                
                if [ \"\$all_ready\" = true ]; then
                    echo 'All Redis nodes are ready!'
                    break
                fi
                
                echo 'Waiting \${BACKOFF_DELAY}s before retrying...'
                sleep \$BACKOFF_DELAY
                
                # Exponential backoff (max 10s)
                if [ \$BACKOFF_DELAY -lt 10 ]; then
                    BACKOFF_DELAY=\$((BACKOFF_DELAY * 2))
                fi
            done
            
            # Create the Redis cluster
            echo 'Creating Redis cluster...'
            redis-cli --cluster create \$REDIS_NODES --cluster-replicas 1 --cluster-yes
            
            if [ \$? -ne 0 ]; then
                echo 'ERROR: Failed to create Redis cluster'
                exit 1
            fi
            
            echo 'Redis cluster created successfully!'
            
            # Post-create sanity check with hashtagged test keys
            echo 'Running post-create sanity checks...'
            
            # Test slot-aware routing with hashtagged keys
            test_key='{test}:cluster_check'
            test_value='cluster_working_\$(date +%s)'
            
            # Set a test key using cluster mode
            if redis-cli -c -h 172.38.0.11 -p 6379 set \$test_key \$test_value; then
                echo 'Successfully set test key: \$test_key'
            else
                echo 'ERROR: Failed to set test key'
                exit 1
            fi
            
            # Retrieve the test key from a different node to verify slot routing
            retrieved_value=\$(redis-cli -c -h 172.38.0.12 -p 6379 get \$test_key)
            if [ \"\$retrieved_value\" = \"\$test_value\" ]; then
                echo 'Successfully retrieved test key from different node: \$retrieved_value'
                echo 'Cluster slot-aware routing is working correctly!'
            else
                echo 'ERROR: Slot-aware routing test failed. Expected: \$test_value, Got: \$retrieved_value'
                exit 1
            fi
            
            # Clean up test key
            redis-cli -c -h 172.38.0.11 -p 6379 del \$test_key >/dev/null
            
            # Display cluster status
            echo 'Final cluster status:'
            redis-cli -c -h 172.38.0.11 -p 6379 cluster nodes
            
            echo 'Redis cluster initialization completed successfully!'
            "
        networks:
            - redis_network
networks:
    redis_network:
        driver: bridge
        ipam:
            config:
                - subnet: 172.38.0.0/16
                  gateway: 172.38.0.1