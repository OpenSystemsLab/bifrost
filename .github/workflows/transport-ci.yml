name: Transport CI - Dependency Update and Docker Build

on:
  push:
    branches:
      - test/gh-actions
    # tags:
    #   - "core/v*" # Triggers dependency update
    #   - "transports/v*" # Triggers docker build (for manual tags)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  ACCOUNT: maximhq
  IMAGE_NAME: bifrost

jobs:
  update-transport-dependency:
    if: startsWith(github.ref, 'refs/tags/core/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_transport_tag: ${{ steps.next_version.outputs.new_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.1"

      - name: Get and validate core version from tag
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/core/}

          # Validate core tag format
          if ! echo "$TAG_NAME" | grep -qE '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Invalid core tag format 'core/$TAG_NAME'. Expected format: core/vMAJOR.MINOR.PATCH"
            exit 1
          fi

          echo "version=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Core version: ${TAG_NAME}"

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest transport version and increment
        id: next_version
        run: |
          # Get the latest transport tag (using transports/ prefix to match docker build)
          LATEST_TAG=$(git tag -l 'transports/v*' | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            # If no transport tag exists, start with v0.1.0
            NEW_TAG="transports/v0.1.0"
          else
            # Extract version numbers
            VERSION=${LATEST_TAG#transports/v}
            
            # Validate version format
            if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              echo "Error: Invalid tag format '$LATEST_TAG'. Expected format: transports/vMAJOR.MINOR.PATCH"
              exit 1
            fi
            
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="transports/v${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi

          # Check if the new tag already exists
          if git tag --list | grep -q "^${NEW_TAG}$"; then
            echo "Error: Tag '$NEW_TAG' already exists!"
            exit 1
          fi

          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT
          echo "New transport version will be: ${NEW_TAG}"

      - name: Update transport dependency
        working-directory: transports
        run: |
          echo "Updating core dependency to ${{ steps.get_version.outputs.version }}"
          if ! go get github.com/maximhq/bifrost/core@${{ steps.get_version.outputs.version }}; then
            echo "Error: Failed to fetch core version ${{ steps.get_version.outputs.version }}"
            exit 1
          fi
          go mod tidy

      - name: Build transport
        working-directory: transports
        run: go build ./...

      - name: Commit and push changes
        run: |
          git add transports/go.mod transports/go.sum
          if git diff --staged --quiet; then
            echo "No changes to commit. Dependency is already up to date."
          else
            git commit -m "chore: update transport's core dependency to ${{ steps.get_version.outputs.version }}"
            git push
          fi

      - name: Create and push transport tag
        run: |
          git tag ${{ steps.next_version.outputs.new_tag }}
          git push origin ${{ steps.next_version.outputs.new_tag }}

  build-and-push-docker:
    if: startsWith(github.ref, 'refs/tags/transports/v') || needs.update-transport-dependency.result == 'success'
    needs: [update-transport-dependency]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract and validate metadata
        id: meta
        run: |
          # Determine the tag to use
          if [ "${{ needs.update-transport-dependency.outputs.new_transport_tag }}" != "" ]; then
            # Use the tag created by dependency update
            TAG="${{ needs.update-transport-dependency.outputs.new_transport_tag }}"
          else
            # Use the tag that triggered this workflow (manual tag)
            TAG=${GITHUB_REF#refs/tags/}
          fi

          echo "tag=${TAG}" >> $GITHUB_OUTPUT

          # Extract version from tag
          VERSION=${TAG#transports/v}

          # Validate version format
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Invalid tag format '$TAG'. Expected format: transports/vMAJOR.MINOR.PATCH"
            exit 1
          fi

          # Create image tags (Docker tags cannot contain slashes, so use version only)
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "${{ env.REGISTRY }}/${{ env.ACCOUNT }}/${{ env.IMAGE_NAME }}:v${VERSION}" >> $GITHUB_OUTPUT
          echo "${{ env.REGISTRY }}/${{ env.ACCOUNT }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate timestamp
        id: timestamp
        run: echo "created_at=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./transports
          file: ./transports/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=Bifrost LLM Gateway (HTTP)
            org.opencontainers.image.description=The fastest LLM gateway written in Go. Learn more here: https://github.com/maximhq/bifrost
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.meta.outputs.tag }}
            org.opencontainers.image.created=${{ steps.timestamp.outputs.created_at }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            TRANSPORT_TYPE=http
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo "Image pushed successfully with tags from previous step"
