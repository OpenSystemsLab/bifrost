name: Transport Dependency Update

on:
  push:
    tags:
      - "core/v*" # Triggers on tags that start with core/v

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-transport:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.1"

      - name: Get and validate core version from tag
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/core/}

          # Validate core tag format
          if ! echo "$TAG_NAME" | grep -qE '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Invalid core tag format 'core/$TAG_NAME'. Expected format: core/vMAJOR.MINOR.PATCH"
            exit 1
          fi

          echo "version=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Core version: ${TAG_NAME}"

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest transport version and increment
        id: next_version
        run: |
          # Get the latest transport tag
          LATEST_TAG=$(git tag -l 'transport/v*' | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            # If no transport tag exists, start with v0.1.0
            NEW_TAG="transport/v0.1.0"
          else
            # Extract version numbers
            VERSION=${LATEST_TAG#transport/v}
            
            # Validate version format
            if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              echo "Error: Invalid tag format '$LATEST_TAG'. Expected format: transport/vMAJOR.MINOR.PATCH"
              exit 1
            fi
            
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="transport/v${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi

          # Check if the new tag already exists
          if git tag --list | grep -q "^${NEW_TAG}$"; then
            echo "Error: Tag '$NEW_TAG' already exists!"
            exit 1
          fi

          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT
          echo "New transport version will be: ${NEW_TAG}"

      - name: Update transport dependency
        working-directory: transports
        run: |
          echo "Updating core dependency to ${{ steps.get_version.outputs.version }}"
          if ! go get github.com/maximhq/bifrost/core@${{ steps.get_version.outputs.version }}; then
            echo "Error: Failed to fetch core version ${{ steps.get_version.outputs.version }}"
            exit 1
          fi
          go mod tidy

      - name: Build transport
        working-directory: transports
        run: go build ./...

      - name: Commit and push changes
        run: |
          git add transports/go.mod transports/go.sum
          if git diff --staged --quiet; then
            echo "No changes to commit. Dependency is already up to date."
            exit 0
          fi

          git commit -m "chore: update transport's core dependency to ${{ steps.get_version.outputs.version }}"
          git push

      - name: Create and push transport tag
        run: |
          git tag ${{ steps.next_version.outputs.new_tag }}
          git push origin ${{ steps.next_version.outputs.new_tag }}
